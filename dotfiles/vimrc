"
"  Pathogen
"
execute pathogen#infect()
execute pathogen#helptags()
filetype plugin on
filetype indent on

"
"  General behavior
"
set nocompatible                " Use vim defaults
let mapleader=","               " Use the comma as leader
set nobackup                    " Do not backup files on overwrite
set history=250 		  " Sets how many lines of history VIM has to remember

set noswapfile        " Disale swap files
set nowb
set encoding=utf-8

"
"  Navigation & Viewport
"
set scrolloff=5       " at least 5 lines of context when moving cursor
set sidescrolloff=5   " and 5 columns of context
set hidden                          " Allow switch beetween modified buffers without saving
set backspace=indent,eol,start      " Improve backspacing
" Makes it change cwd to the file you're currently editing:
" autocmd BufEnter * lcd %:p:h
"
"
"  Syntax and files
"
syntax on
let python_highlight_all=1
au BufRead,BufNewFile *.pgsql set filetype=sql
au BufRead,BufNewFile *.swig set filetype=sql
au BufRead,BufNewFile *.krb set filetype=py
au BufRead,BufNewFile *.twig set filetype=html
au BufRead,BufNewFile *.pp setf puppet

" proper PEP8 indentation (with longer lines 120 chars)
au BufRead,BufNewFile *.py set tabstop=4 softtabstop=4 shiftwidth=4 textwidth=119 expandtab autoindent fileformat=unix

"
"  Tabs & Indentation
"
" Indentation settings according to personal preference.
set autoindent
set smartindent
"set formatoptions+=r
set shiftwidth=4 	" The width of a TAB is set to 4. Still it is a \t. It is just that
set softtabstop=4 	" See 4 spaces per tab
set tabstop=4		" A tab is 4 spaces
set expandtab 		"tab key (in insert mode) insert spaces instead of tab characters

autocmd FileType make setlocal noexpandtab       "To turn off expandtab for editing makefiles
set lbr " Linebreak on 500 characters
set tw=200
set ff=dos
set noeol

"Automatically removing all trailing whitespace
"Every time the user issues a :w command, Vim will automatically remove all trailing whitespace before saving. Annoying
"autocmd BufWritePre * :%s/\s\+$//e

"
"  Search Settings
"
set incsearch   "Find the next match as we type the search
set hlsearch    "Hilight searches by default
set viminfo='100,f1 "Save up to 100 marks, enable capital marks
set ignorecase  "Usually I don't care about case when searching
set smartcase   "Only ignore case when we type lower case when searching


"
"  Status line
"
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L] "format
set laststatus=2 "status line position
" Make vim use a bash-like tab completion instead of the default:
set wildmode=longest:list

"
"  Change colorscheme when calling vimdiff
"
if &diff
    colorscheme industry
endif


"
"  Mapping
"
"Clean the previous search (to clean highlight)
map <silent> <C-N> :silent noh<CR>

"
"  Plugins specific configuration or vim configuration to improve plugin
"
" ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['.pablo']

" phpcomplete just for php
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
set completeopt=longest,menuone

" vim-taglist
let Tlist_Use_Right_Window = 1
nnoremap <silent> <F8> :TlistToggle<CR>

" nerdtree
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
nnoremap <silent> <F6> :NERDTreeToggle<CR>
nnoremap <silent> <F7> :NERDTreeFind<CR>
""" open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
""" closing a buffer properly. nerdtree  buffer
nnoremap <leader>q :bp<cr>:bd #<cr>

" vim-gutentags
let g:gutentags_project_root=['.pablo']
let g:gutentags_add_default_project_roots=0
let g:gutentags_cache_dir = '/home/pcaldentey/bin/tags_cache'
let g:gutentags_ctags_exclude = ['cache', 'Tests', '*min.js']

" vim-gitgutter
set updatetime=250
" 	preview hunk changes with hp but closes the buffer of the changes when the input pointer leaves the changed hunk.
"au CursorMoved * if exists('*gitgutter#utility#is_active') && gitgutter#utility#is_active() |
"      \   if empty(gitgutter#hunk#current_hunk()) |
"      \     pclose |
"      \   else |
"      \     call gitgutter#preview_hunk() |
"      \   endif |
"      \ endif

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_phpcs_post_args = "--standard=PSR2" " Use the PSR-2 standard for PHP Code Sniffer
let g:syntastic_json_checkers = ['jsonlint'] " Use JSON linter
let g:syntastic_python_checkers = ['flake8']

" Close syntastic window 
map <silent> <C-B> :SyntasticReset<CR>

" Youcompleteme
let g:ycm_key_invoke_completion = '<C-a>'
let g:ycm_server_python_interpreter = '/usr/bin/python2'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" vim-php-namespace
"   add use statements
function! IPhpInsertUse()
  call PhpInsertUse()
  call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
"   class or function names fully qualified
function! IPhpExpandClass()
   call PhpExpandClass()
   call feedkeys('a', 'n')
endfunction
autocmd FileType php inoremap <Leader>e <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>
